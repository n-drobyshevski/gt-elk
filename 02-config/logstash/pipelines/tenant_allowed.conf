# Configuration Logstash - Import CSV Tenants Autorisés par Pays
# Fichier: /etc/logstash/pipelines.d/tenant_allowed.conf
#
# Ce pipeline traite les fichiers CSV contenant les pays autorisés par tenant
# Format CSV: tenant,allowed
# Exemple: contoso,US|GB|FR|DE

input {
  file {
    id => "tenant_csv"
    path => "/var/data/csv/tenant_allowed.csv"
    start_position => "beginning"
    sincedb_path => "/var/lib/logstash/sincedb/tenant_allowed.sincedb"
    codec => plain { charset => "UTF-8" }
  }
}

filter {
  # Analyse CSV avec séparateur virgule
  csv {
    separator => ","
    columns => ["tenant","allowed"]
    skip_header => "true"
  }
  
  # Transformation du champ allowed en tableau (split par |)
  # Exemple: "US|GB|DE" devient ["US", "GB", "DE"]
  mutate {
    split => { "allowed" => "|" }
  }
  
  # Validation du format tenant (alphanumerique, tirets, underscores)
  if !([tenant] =~ /^[a-z0-9_-]+$/) {
    drop { 
      message => "Format tenant invalide: %{tenant}"
    }
  }
  
  # Validation des codes pays (format ISO 3166-1 alpha-2)
  ruby {
    code => '
      allowed_countries = event.get("allowed")
      if allowed_countries.is_a?(Array)
        valid_countries = allowed_countries.select { |country| 
          country.match?(/^[A-Z]{2}$/) 
        }
        if valid_countries.length != allowed_countries.length
          event.tag("_invalid_country_codes")
        end
        event.set("allowed", valid_countries)
      end
    '
  }
  
  # Ajout de métadonnées pour le monitoring
  mutate {
    add_field => {
      "[@metadata][pipeline]" => "tenant_allowed_import"
      "[@metadata][timestamp]" => "%{@timestamp}"
      "countries_count" => "%{[allowed][size]}"
    }
  }
}

output {
  # Index Elasticsearch pour les données tenant
  elasticsearch {
    hosts => ["https://elastic.example.com:9200"]
    index => "tenant_allowed_countries"
    # Utilisation du tenant comme clé unique pour permettre les mises à jour
    document_id => "%{tenant}"
    user => "${ES_USER}"
    password => "${ES_PASS}"
    ssl => true
    cacert => "/etc/logstash/certs/ca.crt"
    # Configuration SSL avancée
    ssl_certificate_verification => true
    ssl_cipher_suites => ["TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"]
  }
  
  # Debug output (à désactiver en production)
  stdout { 
    codec => rubydebug 
    id => "debug_tenant_allowed"
  }
}
